{"version":3,"sources":["components/cell/cell.js","App.js","index.js"],"names":["Cell","props","className","imgId","row","src","alt","onMouseOver","e","fx","App","state","imageRow1","imageRow2","sizeUp","focusItemIndex","prevEnlargedIndex","id","target","getAttribute","imgRw","enlargedItemArr","map","x","i","enlarged","toString","moveTo","shiftImg","splice","setState","$","get","then","res","images","data","sort","Math","random","slice","color","this","Component","ReactDOM","render","document","getElementById"],"mappings":"0QAmBeA,EAdF,SAAAC,GAET,OACI,qBACIC,UAAWD,EAAMC,UACjB,cAAaD,EAAME,MACnB,WAAUF,EAAMG,IAChBC,IAAKJ,EAAMI,IACXC,IAAG,eAAUL,EAAME,OACnBI,YAAa,SAAAC,GAAC,OAAIP,EAAMQ,GAAGD,OCTjCE,G,kNAEFC,MAAQ,CACJC,UAAW,GACXC,UAAW,I,EA0BfC,OAAS,SAACN,GAEN,IAMIO,EACAC,EAPAC,EAAKT,EAAEU,OAAOC,aAAa,eAE3BC,EAAQ,WADCZ,EAAEU,OAAOC,aAAa,YAS/BE,EAPc,EAAKV,MAAMS,GAOKE,KAAI,SAACC,EAAGC,GAOtC,OALGD,EAAEE,WAAUT,EAAoBQ,GAEnCP,IAAOM,EAAEN,GAAGS,WAAaH,EAAEE,UAAW,EAAOF,EAAEE,UAAW,EAEvDR,IAAOM,EAAEN,GAAGS,aAAYX,EAAiBS,GACrCD,KASX,GAAGR,EAAiB,EAAG,CACnB,IAAIY,EACAC,EAAWP,EAAgBQ,OAAOd,EAAgB,GAElDY,EADDZ,EAAiBC,IAAsB,EAC7BD,EAAiB,EAEjBA,EAAiB,EAE9BM,EAAgBQ,OAAOF,EAAQ,EAAGC,EAAS,IAG/C,EAAKE,SAAL,eACKV,EAAQC,K,uDA/DjB,WAAqB,IAAD,OAChBU,IAAEC,IAAI,8BACDC,MAAK,SAAAC,GACF,IAAIC,EAASD,EAAIE,KAEZC,MAAK,iBAAM,GAAMC,KAAKC,YACtBC,MAAM,EAAG,IACTlB,KAAI,SAACC,EAAGC,GACL,MAAO,CACHP,GAAIM,EAAEN,GACNwB,MAAM,wCAAD,OAA0ClB,EAAEN,IAEjDQ,SAAgB,IAAND,GAAiB,KAANA,MAIjC,EAAKM,SAAS,CACVlB,UAAWuB,EAAOK,MAAM,EAAG,GAC3B3B,UAAWsB,EAAOK,MAAM,EAAG,W,oBAmD3C,WAAU,IAAD,OACL,OACI,gCACI,qBAAKtC,UAAU,gBAAf,SAEQwC,KAAK/B,MAAMC,UAAUU,KAAI,SAAAC,GACrB,OAAO,cAAC,EAAD,CACHnB,IAAK,EAELD,MAAOoB,EAAEN,GACTZ,IAAKkB,EAAEkB,MACPvC,UAAWqB,EAAEE,SAAW,iBAAmB,OAC3ChB,GAAI,EAAKK,QAJJS,EAAEN,SASvB,qBAAKf,UAAU,gBAAf,SAEQwC,KAAK/B,MAAME,UAAUS,KAAI,SAAAC,GACrB,OAAO,cAAC,EAAD,CACHnB,IAAK,EAELD,MAAOoB,EAAEN,GACTZ,IAAKkB,EAAEkB,MACPvC,UAAWqB,EAAEE,SAAW,iBAAmB,OAC3ChB,GAAI,EAAKK,QAJJS,EAAEN,gB,GAlGrB0B,cAgHHjC,ICjHfkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9579a023.chunk.js","sourcesContent":["import React from 'react';\nimport './cell.css';\n\n\n\nconst Cell = props => {\n\n    return (\n        <img \n            className={props.className}\n            data-img-id={props.imgId}\n            data-row={props.row}\n            src={props.src}\n            alt={`ID#: ${props.imgId}`}\n            onMouseOver={e => props.fx(e)}\n        />\n    )\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport $ from 'axios';\nimport Cell from './components/cell';\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        imageRow1: [],\n        imageRow2: []\n    }\n\n    componentDidMount() {\n        $.get(\"https://picsum.photos/list\")\n            .then(res => {\n                let images = res.data\n                // randomize returned images and grab 18 for use\n                    .sort(() => 0.5 - Math.random())\n                    .slice(0, 18)\n                    .map((x, i) => {\n                        return {\n                            id: x.id,\n                            color: `https://picsum.photos/512/288/?image=${x.id}`,\n                            //enlarge two images to start\n                            enlarged: i === 3 || i === 10 ? true : false\n                        }\n                    })\n                //split images into two arrays, one for each container\n                this.setState({\n                    imageRow1: images.slice(0, 9),\n                    imageRow2: images.slice(9, 18)\n                });\n            })\n    }\n    //function to pass down for mouseover behavior\n    sizeUp = (e) => {\n        //grab info for row/id# and determine which array in state to update\n        let id = e.target.getAttribute(\"data-img-id\")\n        let rowNum = e.target.getAttribute(\"data-row\");\n        let imgRw = \"imageRow\" + rowNum;\n        let stateImgArr = this.state[imgRw];\n\n        //declare variables to store target and previous target\n        let focusItemIndex;\n        let prevEnlargedIndex;\n\n        //iterate over images in container\n        let enlargedItemArr = stateImgArr.map((x, i) => {\n            //find currently enlarged img\n            if(x.enlarged) prevEnlargedIndex = i;\n            //enlarge target\n            id === x.id.toString() ? x.enlarged = true : x.enlarged = false;\n            //store target index\n            if(id === x.id.toString()) focusItemIndex = i;\n            return x;\n        })\n\n        //if target is on bottom row of imgs,\n        //splice focused item into array to display in top row\n        //below algorithm keeps the enlarged image under the mouse cursor\n        //while maintaining the shape of the original container\n        //if focused - prev = 4, place 5 indicies earlier\n        //else place 4 indicies earlier\n        if(focusItemIndex > 4) {\n            let moveTo;\n            let shiftImg = enlargedItemArr.splice(focusItemIndex, 1);\n            if(focusItemIndex - prevEnlargedIndex === 4) {\n                moveTo = focusItemIndex - 5;\n            } else {\n                moveTo = focusItemIndex - 4;\n            }\n            enlargedItemArr.splice(moveTo, 0, shiftImg[0]);\n        }\n        //re-render based on modified img array\n        this.setState({\n            [imgRw]: enlargedItemArr\n        })\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"img-container\">\n                    {\n                        this.state.imageRow1.map(x => {\n                            return <Cell\n                                row={1}\n                                key={x.id}\n                                imgId={x.id}\n                                src={x.color}\n                                className={x.enlarged ? \"cell enlarged1\" : \"cell\"}\n                                fx={this.sizeUp}\n                            />\n                        })\n                    }\n                </div>\n                <div className=\"img-container\">\n                    {\n                        this.state.imageRow2.map(x => {\n                            return <Cell\n                                row={2}\n                                key={x.id}\n                                imgId={x.id}\n                                src={x.color}\n                                className={x.enlarged ? \"cell enlarged2\" : \"cell\"}\n                                fx={this.sizeUp}\n                            />\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}